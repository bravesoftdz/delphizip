<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="content-type" content="text/html;charset=UTF-8">
        <title>
            Deflate method
        </title>
        <link rel="stylesheet" type="text/css" href="zmhelp.css">
        <meta name="keywords" content="Deflate;Deflate,TZipMaster;TZipMaster,Deflate;">
        <meta name="revised" content="2012-01-15">
        <meta name="copyright" content="Copyright &#169; DelphiZip 2009,2010,2011,2012">
        <meta name="author" content="Russell Peters">
    </head>
    <body>
        <div class="heading">
            <ul class="nav-links">
                <li><a href="cnt.htm" target="cnt">Contents</a></li>
                <li><a href="idx.htm" target="cnt">Index</a></li>
                <li><a href="copy_file.htm">Previous</a></li>
                <li><a href="delete.htm">Next</a></li>
            </ul>
            <h1>
                Deflate method
            </h1>
        </div>
        <div class="content">
            <dl class="f">
                <dt class="ft">Applies to</dt>
                <dd class="fd">
                    <p class="f-applies"><a href="tzipmaster_component.htm">TZipMaster</a> component</p>
                </dd>
                <dt class="ft">Declaration</dt>
                <dd class="fd">
                    <p class="f-decl">
                        <b>function</b> Deflate(OutStream, InStream: TStream; Length: Int64; <b>var</b> Method: <a href="tzmdeflates_type.htm">TZMDeflates</a>; <b>var</b> CRC: Cardinal): Integer;
                    </p>
                </dd>
                <dt class="ft">Arguments</dt>
                <dd class="fd">
                    <dl>
                        <dt><span class="mono">OutStream: TStream</span></dt>
                        <dd>The resulting stream</dd>
                        <dt><span class="mono">InStream: TStream</span></dt>                       
                        <dd>The source stream</dd>
                        <dt><span class="mono">Length: Int64</span></dt>                          
                        <dd>the size of the data on InStream to be deflated (-1 = full length).</dd>
                        <dt><span class="mono">var Method: TZMDeflates</span></dt>
                        <dd>the requested compression method, on exit it will be the method used.</dd>
                        <dt><span class="mono">var CRC: Cardinal</span></dt>
                        <dd>The CRC that gets updated when compression is finished</dd>
                    </dl>
                </dd>
                <dt class="ft">Results</dt>
                <dd class="fd">
                    <ul class="ul-left">
                        <li>Returns 0 on success otherwise a negative value equal to - <a href="errors_and_messages.htm">Error Code</a>.</li>
                    </ul>
                </dd>
                <dt class="ft">Description</dt>
                <dd class="fd">
                    <p class="f-p">
                        Compress InStream to OutStream, set method and CRC on success.
                    </p>
                </dd>
                <dt class="ft">Example</dt>
                <dd class="tight">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source"><span class="pas-space"> </span><span class="pas-ident">instream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">fn</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmOpenRead</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-kwd">try</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-ident">instream</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-ident">Orig</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">instream</span><span class="pas-sym">.</span><span class="pas-ident">Size</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-ident">outstream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-str">'deflated.bin'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmCreate</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-kwd">try</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-ident">method</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">zmDeflate</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-ident">crc</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">zip</span><span class="pas-sym">.</span><span class="pas-ident">Deflate</span><span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">instream</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-num">1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">method</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">crc</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">             </span>
<span class="pas-space">     </span><span class="pas-ident">Display</span><span class="pas-sym">(</span><span class="pas-str">'orig = '</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-ident">IntToStr</span><span class="pas-sym">(</span><span class="pas-ident">Orig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-str">'  size = '</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-ident">IntToStr</span><span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">.</span><span class="pas-ident">Size</span><span class="pas-sym">)</span><span class="pas-space">        </span>
<span class="pas-space">         </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-str">'  posn = '</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-ident">IntToStr</span><span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-str">'  method = '</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space">         </span>
<span class="pas-space">          </span><span class="pas-str">'  crc = '</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-ident">IntToHex</span><span class="pas-sym">(</span><span class="pas-ident">crc</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">4</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">z</span><span class="pas-sym">.</span><span class="pas-ident">SuccessCnt</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-kwd">begin</span><span class="pas-space">        </span>
<span class="pas-space">       </span><span class="pas-ident">Display</span><span class="pas-sym">(</span><span class="pas-str">'Deflate success'</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-kwd">end</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-kwd">finally</span><span class="pas-space">        </span>
<span class="pas-space">     </span><span class="pas-ident">outstream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-kwd">end</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-kwd">finally</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-ident">instream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-kwd">end</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span><span class="pas-space">        </span>
<span class="pas-space">    </span><span class="pas-ident">handle_error</span><span class="pas-err">!</span><span class="pas-space">        </span></pre>
                </dd>
            </dl>
        </div>
        <div class="foot">2012-01-15 10:10</div>
    </body>
</html>