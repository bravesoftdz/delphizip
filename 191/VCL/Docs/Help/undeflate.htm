<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
        <meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <title>
            Undeflate method
        </title>
        <link rel="stylesheet" type="text/css" href="zmhelp.css">
        <meta name="keywords" content="TZipMaster,Undeflate;Undeflate;Undeflate,TZipMaster;">
        <meta name="revised" content="2012-02-14">
        <meta name="copyright" content="Copyright &copy; DelphiZip 2009,2010,2011,2012">
        <meta name="author" content="Russell Peters">
    </head>
    <body>
        <div class="heading">
            <ul class="nav-links">
                <li><a href="cnt.htm" target="cnt">Contents</a></li>
                <li><a href="idx.htm" target="cnt">Index</a></li>
                <li><a href="showzipmessage.htm">Previous</a></li>
                <li><a href="writespan.htm">Next</a></li>
            </ul>
            <h1>
                Undeflate method
            </h1>
        </div>
        <div class="content">
            <dl class="f">
                <dt class="ft">
                    Applies to
                </dt>
                <dd class="fd">
                    <p class="f-applies">
                        <a href="tzipmaster_component.htm">TZipMaster</a> component
                    </p>
                </dd>
                <dt class="ft">
                    Declaration
                </dt>
                <dd class="fd">
                    <p class="f-decl">
                        <strong>function</strong> Undeflate(OutStream, InStream: TStream; Length: Int64; <strong>var</strong> Method: <a href="tzmdeflates_type.htm">TZMDeflates</a>; <strong>var</strong> CRC: Cardinal): Integer;
                    </p>
                </dd>
                <dt class="ft">
                    Arguments
                </dt>
                <dd class="fd">
                    <dl>
                        <dt>
                            <span class="mono">OutStream: TStream</span>
                        </dt>
                        <dd>
                            where the data will be extracted to
                        </dd>
                        <dt>
                            <span class="mono">InStream: TStream</span>
                        </dt>
                        <dd>
                            The compressed stream
                        </dd>
                        <dt>
                            <span class="mono">Length: Int64</span>
                        </dt>
                        <dd>
                            the amount of compressed data to extract (&lt;0 extract the full stream)
                        </dd>
                        <dt>
                            <span class="mono">var Method: TZMDeflates</span>
                        </dt>
                        <dd>
                            the expected method used to deflate the data
                        </dd>
                        <dt>
                            <span class="mono">var CRC: Cardinal</span>
                        </dt>
                        <dd>
                            the initial crc (-1 or if encrypted the value given by Deflate)
                        </dd>
                    </dl>
                </dd>
                <dt class="ft">
                    Results
                </dt>
                <dd class="fd">
                    <ul class="ul-left">
                        <li>Returns 0 on success otherwise an <a href="errcode_property.htm">ErrCode</a>.
                        </li>
                        <li>The method used is set in Method
                        </li>
                        <li>The calculated crc in CRC
                        </li>
                    </ul>
                </dd>
                <dt class="ft">
                    Description
                </dt>
                <dd class="fd">
                    <p class="f-p">
                        De-compress InStream to OutStream, set method and CRC on success.
                    </p>
                    <p class="f-p">
                        If encryption was used on Entry CRC must be set to the value given by <a href="deflate.htm">Deflate</a>
                    </p>
                </dd>
                <dt class="ft">
                    Example
                </dt>
                <dd class="fd">
                    <!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
                    <pre class="pas-source">
 <span class="pas-ident">instream</span> <span class="pas-sym">:=</span> <span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-str">&#39;deflated.bin&#39;</span><span class="pas-sym">,</span> <span class="pas-ident">fmOpenRead</span><span class="pas-sym">)</span><span class="pas-sym">;</span>        
 <span class="pas-kwd">try</span>        
   <span class="pas-ident">outstream</span> <span class="pas-sym">:=</span> <span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-str">&#39;zb.tmp&#39;</span><span class="pas-sym">,</span> <span class="pas-ident">fmCreate</span><span class="pas-sym">)</span><span class="pas-sym">;</span>        
   <span class="pas-kwd">try</span>        
     <span class="pas-ident">method</span> <span class="pas-sym">:=</span> <span class="pas-ident">zmStore</span><span class="pas-sym">;</span>        
     <span class="pas-ident">crc</span> <span class="pas-sym">:=</span> <span class="pas-num">0</span><span class="pas-sym">;</span>        
     <span class="pas-ident">Result</span> <span class="pas-sym">:=</span> <span class="pas-ident">zip</span><span class="pas-sym">.</span><span class="pas-ident">Undeflate</span><span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">,</span> <span class="pas-ident">instream</span><span class="pas-sym">,</span> <span class="pas-sym">-</span><span class="pas-num">1</span><span class="pas-sym">,</span> <span class="pas-ident">method</span><span class="pas-sym">,</span> <span class="pas-ident">crc</span><span class="pas-sym">)</span><span class="pas-sym">;</span>        
             
     <span class="pas-ident">Display</span><span class="pas-sym">(</span><span class="pas-str">&#39;size = &#39;</span> <span class="pas-sym">+</span> <span class="pas-ident">IntToStr</span><span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">.</span><span class="pas-ident">Size</span><span class="pas-sym">)</span> <span class="pas-sym">+</span> <span class="pas-str">&#39;  posn = &#39;</span> <span class="pas-sym">+</span> <span class="pas-ident">IntToStr</span>        
         <span class="pas-sym">(</span><span class="pas-ident">outstream</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-sym">)</span> <span class="pas-sym">+</span> <span class="pas-str">&#39;  method = &#39;</span> <span class="pas-sym">+</span> <span class="pas-ident">crc</span> <span class="pas-sym">=</span> <span class="pas-str">&#39; + IntToHex(crc, 4));        
     if z.SuccessCnt = 1 then        
     begin        
       Display(&#39;</span><span class="pas-ident">success</span><span class="pas-str">&#39;);        
     end;        
   finally        
     outstream.Free;        
   end;        
 finally        
   instream.Free;        
 end;        
 if Result &lt;&gt; 0 then        
    handle_error!        
</span>
</pre>
                </dd>
            </dl>
        </div>
        <div class="foot">
            2012-02-14 09:51
        </div>
    </body>
</html>
