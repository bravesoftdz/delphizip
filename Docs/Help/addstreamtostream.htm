<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="content-type" content="text/html;charset=UTF-8">
        <title>
            AddStreamToStream method
        </title>
        <link rel="stylesheet" type="text/css" href="zmhelp.css">
        <meta name="keywords" content="AddStreamToStream;AddStreamToStream,TZipMaster;TZipMaster,AddStreamToStream;">
        <meta name="revised" content="2012-01-05">
        <meta name="copyright" content="Copyright &#169; DelphiZip 2009,2010,2011,2012">
        <meta name="author" content="Russell Peters">
    </head>
    <body>
        <div class="heading">
            <ul class="nav-links">
                <li><a href="cnt.htm" target="cnt">Contents</a></li>
                <li><a href="idx.htm" target="cnt">Index</a></li>
                <li><a href="addstreamtofile.htm">Previous</a></li>
                <li><a href="addzippedfiles.htm">Next</a></li>
            </ul>
            <h1>
                AddStreamToStream method
            </h1>
            <ul class="also-links">
                <li><a href="addstreamtofile.htm">AddStreamToFile</a></li>
                <li><a href="zipstream_property.htm">ZipStream</a></li>
                <li><a href="extractfiletostream.htm">ExtractFileToStream</a></li>
                <li><a href="extractstreamtostream.htm">ExtractStreamToStream</a></li>
            </ul>
        </div>
        <div class="content">
        <dl class="f">
            <dt class="ft">Applies to</dt>
            <dd class="fd">
                <p class="f-p"><a href="tzipmaster_component.htm">TZipMaster</a> component</p>
            </dd>
            <dt class="ft">Declaration</dt>
            <dd class="fd">
                <p class="f-decl">
                    <b>function</b> AddStreamToStream(InStream: TMemoryStream): TMemoryStream;
                </p>
            </dd>
            <dt class="ft">Arguments</dt>
            <dd class="fd">
				<dl>
					<dt><span class="mono">InStream: TMemoryStream</span></dt>
					<dd>The stream to Add</dd>
				</dl>
            </dd>
            <dt class="ft">Results</dt>
            <dd class="fd">
				<ul class="ul-left">
				  <li>Sets <a href="zipstream_property.htm">ZipStream</a> to the resulting stream on success otherwise nil.</li>
				  <li>Returns ZipStream.</li>
				  <li>Sets <a href="errcode_property.htm">ErrCode</a> and <a href="errmessage_property.htm">ErrMessage</a></li>
				  <li>Sets <a href="successcnt_property.htm">SuccessCnt</a></li>
				</ul>
            </dd>
            <dt class="ft">Description</dt>
            <dd class="fd">
                <p class="f-p">
                    The AddStreamToStream method adds memory stream data to the ZipStream as packed data.
                </p>
                <p class="f-p">
                    Adds the data from a memory stream to the <a href="zipstream_property.htm">ZipStream</a>, so no files are involved in this action.
                </p>
                <p class="f-p">
                    The size of the output stream is set to 6 bytes more than the actual output size because:
                </p>
                <p class="f-p">
                    - The first two bytes are used as a flag, STORED = 0 or DEFLATED = 8.
                </p>  <!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source">
<span class="pas-space"> </span><span class="pas-kwd">Type</span>
<span class="pas-space">   </span><span class="pas-ident">pFlag</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">^</span><span class="pas-ident">Smallint</span><span class="pas-sym">;</span>
<span class="pas-space">   </span><span class="pas-ident">pCRC</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">^</span><span class="pas-ident">Cardinal</span><span class="pas-sym">;</span> 
<span class="pas-space"> </span><span class="pas-kwd">Var</span>
<span class="pas-space">   </span><span class="pas-ident">Flag</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">SmallInt</span><span class="pas-sym">;</span>
<span class="pas-space">   </span><span class="pas-ident">CRC</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Cardinal</span><span class="pas-sym">;</span> 
<span class="pas-space">   </span><span class="pas-ident">Flag</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">pFlag</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-space"> </span><span class="pas-ident">ZipMaster1</span><span class="pas-sym">.</span><span class="pas-ident">ZipStream</span><span class="pas-sym">.</span><span class="pas-ident">Memory</span><span class="pas-space"> </span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">^</span><span class="pas-sym">;</span>
</pre>
                <p class="f-p">
                    - The next four bytes are set to the calculated CRC value.
                </p>
               <!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source">
<span class="pas-space">   </span><span class="pas-ident">CRC</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">pCRC</span><span class="pas-sym">(</span><span class="pas-space"> </span><span class="pas-ident">pChar</span><span class="pas-sym">(</span><span class="pas-space"> </span><span class="pas-ident">ZipMaster1</span><span class="pas-sym">.</span><span class="pas-ident">ZipStream</span><span class="pas-sym">.</span><span class="pas-ident">Memory</span><span class="pas-space"> </span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">^</span><span class="pas-sym">;</span>
<span class="pas-space"> </span></pre>
                <p class="f-p">
                    The start of the stream (Position) is set to the actual data start, i.e. 6 bytes from the start of the stream.
                </p>
            </dd>
            <dt class="ft">Example</dt>
            <dd class="fd">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source"><span class="pas-space"> </span><span class="pas-ident">Example</span><span class="pas-sym">:</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-kwd">Var</span><span class="pas-space">        </span>
<span class="pas-space"> </span><span class="pas-ident">MyData</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">          </span>
<span class="pas-space">   </span><span class="pas-ident">MyData</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">          </span>
<span class="pas-space">   </span><span class="pas-comment">// Add some text as data...        </span>
<span class="pas-space">   </span><span class="pas-ident">MyData</span><span class="pas-sym">.</span><span class="pas-ident">LoadFromFile</span><span class="pas-sym">(</span><span class="pas-space"> </span><span class="pas-str">'L:\SomeFile.dat'</span><span class="pas-space"> </span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-comment">// MyData.LoadFromStream( aStream ); // Or use data from another stream.        </span>
<span class="pas-space">   </span><span class="pas-comment">// MyData.Write( aTextbuffer, NumberOfBytes ); // Or data from a character buffer.        </span>
<span class="pas-space">   </span><span class="pas-ident">ZipMaster1</span><span class="pas-sym">.</span><span class="pas-ident">AddStreamToStream</span><span class="pas-sym">(</span><span class="pas-space"> </span><span class="pas-ident">MyData</span><span class="pas-space"> </span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">   </span><span class="pas-comment">// *** Another possibility ***        </span>
<span class="pas-space">   </span><span class="pas-comment">// Var MyOutData: TZipStream;        </span>
<span class="pas-space">   </span><span class="pas-comment">// MyOutData := ZipMaster1.AddStreamToStream( MyData );        </span>
<span class="pas-space">   </span><span class="pas-ident">MyData</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span><span class="pas-space">        </span>
<span class="pas-space">          </span>
<span class="pas-space">   </span><span class="pas-comment">// The Output can be found in the ZipMaster1.ZipStream property.        </span></pre>
            </dd>
        </dl>
		</div>
        <div class="foot">2012-01-05 10:54</div>
    </body>
</html>